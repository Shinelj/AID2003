前情回顾

1. ftp 文件服务器

   多线程并发模型

   * 思考过程
   * 请求应答机制

2. IO模型

   IO密集 ：  消耗cpu比较少，运行速度比较慢，容易出现阻塞

   cpu密集： 消耗cpu多，运行速度快，没有阻塞


   io模型： 阻塞IO

   非阻塞IO ： 让io不阻塞

              sockfd.setblocking()
              sockfd.settimeout()

3. IO多路复用

   select
   poll
   epoll

文件描述符：操作系统给每个IO对象提供一个 >= 0的整数编号，这个编号
就叫做文件描述符 fileno.  系统中所有IO对象的文件描述符不重复

对比三种IO多路复用方法：

select ： 支持操作系统最多   最多监控1024个IO   效率一般
poll  ： 支持 Linux  unix    监控IO没有限制  效率一般
epoll ： 支持 Linux     监控IO没有限制   效率最高

水平出发： 当IO对象有事件发生会一直提醒，直到处理了为止
边缘出发： 当IO对象有事件发生只提醒一次，如果不处理则不再重复提醒，
          直到这个IO对象又有事件发生再一起处理






